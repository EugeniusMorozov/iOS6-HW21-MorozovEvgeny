import UIKit

class ViewController: UIViewController {

    // MARK: - Properties

    @IBOutlet weak var changeBackgroundColorButton: UIButton!
    @IBOutlet weak var passwordTextField: UITextField!
    @IBOutlet weak var passwordLabel: UILabel!
    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!

    let passwordLength = 4
    var isBlack: Bool = false {
        didSet {
            self.view.backgroundColor = isBlack ? .black : .white
        }
    }

    // MARK: - Lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
    }

    // MARK: - Private functions

    private func bruteForcePassword(passwordToUnlock: String) {
        let operation = BruteForceOperation(passwordToUnlock: passwordToUnlock)
        operation.completionBlock = {
            DispatchQueue.main.async { [self] in
                self.activityIndicator.stopAnimating()
                self.passwordTextField.isSecureTextEntry = false
                self.passwordLabel.text = "Пароль взломан: \(operation.bruteforcedPassword)"
            }
        }
        let queue = OperationQueue()
        queue.addOperation(operation)
    }

    private func randomPassword(with length: Int) -> String {
        var randomPassword = ""
        for _ in 0..<Int(length){
            randomPassword += String(String().lettersAndDigits.randomElement()!)
        }
        return randomPassword
    }
    // MARK: - Actions

    @IBAction func changeBackgroundColorButtonTapped(_ sender: Any) {
        isBlack.toggle()
    }

    @IBAction func generateAndBruteForcePasswordButtonTapped(_ sender: Any) {
        let autogeneratedPassword = randomPassword(with: passwordLength)
        activityIndicator.startAnimating()
        bruteForcePassword(passwordToUnlock: autogeneratedPassword)
        passwordTextField.isSecureTextEntry = true
        passwordLabel.text = ""
        passwordTextField.text = autogeneratedPassword
    }
}
